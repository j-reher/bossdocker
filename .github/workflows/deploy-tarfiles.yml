name: Deploy .tar.gz files

on:
  push:
    branches:
    - main
    paths:
    - 'versions.txt'
  workflow_dispatch:
    inputs:
      force-running-all:
        required: false
        type: boolean
        default: false
        description: 'Force creating all tar archives and replace those that exists. Caution, this will take a while!'  

env:
  DEPLOY_ALL: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.force-running-all == 'true' }}

jobs:
  list-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Stage tar files for missing versions for upload
      if: ${{ env.DEPLOY_ALL == 'false' }}
      run: |
        echo "This will go through versions and list the missing ones in a new file 'versions_processed.txt'"
        touch versions_processed.txt
        while IFS="" read -r p || [ -n "$p" ]
        do
          if ! curl --head --silent --fail "https://ep1.rub.de/~jreher/bossdocker-download/cmthome/cmthome-${{ matrix.bossversion }}.tar.gz" 2> /dev/null && \
          curl --head --silent --fail "https://ep1.rub.de/~jreher/bossdocker-download/cache/cvmfs-cache-${{ matrix.bossversion }}.tar.gz" 2> /dev/null && \
          curl --head --silent --fail "https://ep1.rub.de/~jreher/bossdocker-download/testrelease/TestRelease-${{ matrix.bossversion }}.tar.gz" 2> /dev/null ; then
            echo "Staging files for version $p for upload."
            echo "$p" >> versions_processed.txt
          fi
        done <versions.txt
    - name: Stage all versions for upload
      if: ${{ env.DEPLOY_ALL == 'true' }}
      run: |
        cp versions.txt versions_processed.txt
    - name: Convert version list to Matrix
      id: set-matrix 
      run: echo "::set-output name=matrix::$(cat versions_processed.txt | jq -R -s -c 'split("\n")[:-1]')"

  process-version:
    needs: list-versions
    runs-on: ubuntu-latest
    if: ${{ needs.list-versions.outputs.matrix != '[]' && needs.list-versions.outputs.matrix != '' }}
    strategy:
      fail-fast: false
      matrix:
        bossversion: ${{ fromJson(needs.list-versions.outputs.matrix) }}
    steps:
    - name: Run Cachemaker container
      uses: addnab/docker-run-action@v1
      with:
        image: jreher/boss-utils:mkcache
        options: --security-opt label=disable --privileged -v ${{ github.workspace }}/out:/out
        run: /root/cachemaker.sh ${{ matrix.bossversion }}
    - name: Upload tar files as artifact
      uses: actions/upload-artifact@v3
      with:
        name: tarfiles-${{ matrix.bossversion }}
        path: out/*

  deploy-version:
    needs: [process-version, list-versions]
    runs-on: ubuntu-latest
    if: ${{ needs.list-versions.outputs.matrix != '[]' && needs.list-versions.outputs.matrix != '' }}
    strategy:
      fail-fast: false
      matrix:
        bossversion: ${{ fromJson(needs.list-versions.outputs.matrix) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Make artifact restore directory
      run: mkdir -p out
    - name: Restore tar files from artifact
      uses: actions/download-artifact@v3
      with:
        name: tarfiles-${{ matrix.bossversion }}
        path: out
    - name: Upload cmthome files
      uses: nogsantos/scp-deploy@master
      with:
        src: out/cmthome-${{ matrix.bossversion }}.tar.gz
        host: ${{ secrets.SSH_HOST }}
        remote: ${{ secrets.SSH_DIR }}/cmthome/
        port: ${{ secrets.SSH_PORT }}
        user: jreher
        key: ${{ secrets.SSH_KEY }}
    - name: Upload TestRelease files
      uses: nogsantos/scp-deploy@master
      with:
        src: out/TestRelease-${{ matrix.bossversion }}.tar.gz
        host: ${{ secrets.SSH_HOST }}
        remote: ${{ secrets.SSH_DIR }}/testrelease/
        port: ${{ secrets.SSH_PORT }}
        user: jreher
        key: ${{ secrets.SSH_KEY }}
    - name: Upload cvmfs-cache files
      uses: nogsantos/scp-deploy@master
      with:
        src: out/cvmfs-cache-${{ matrix.bossversion }}.tar.gz
        host: ${{ secrets.SSH_HOST }}
        remote: ${{ secrets.SSH_DIR }}/cache/
        port: ${{ secrets.SSH_PORT }}
        user: jreher
        key: ${{ secrets.SSH_KEY }}
    
  cleanup:
    needs: [list-versions, deploy-version]
    runs-on: ubuntu-latest
    if: ${{ needs.list-versions.outputs.matrix != '[]' && needs.list-versions.outputs.matrix != '' }}
    strategy:
      matrix:
        bossversion: ${{ fromJson(needs.list-versions.outputs.matrix) }}
    steps:
      - name: Create small dummies
        run: |
          mkdir -p out
          touch out/cmthome-${{ matrix.bossversion }}.tar.gz
          touch out/testrelease-${{ matrix.bossversion }}.tar.gz
          touch out/cvmfs-cache-${{ matrix.bossversion }}.tar.gz
      - name: Replace large artifacts with dummies
        uses: actions/upload-artifact@v3
        with:
          name: tarfiles-${{ matrix.bossversion }}
          path: out/*.tar.gz
          retention-days: 1
