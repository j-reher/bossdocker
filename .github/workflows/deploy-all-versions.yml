name: Deploy all versions

on:
  workflow_run:
    workflows: ["Deploy .tar.gz files","Deploy Image -- Latest"]
    types:
      - completed
    branches: ["main"]
  workflow_dispatch:
    inputs:
      deploy-all:
        type: boolean
        required: false
        default: false
        description: Remake all images instead of only the missing ones.

env:
  DEPLOY_ALL: ${{ ( github.event_name == 'workflow_run' && github.event.workflow.name == 'Deploy Image -- Latest' ) || ( github.event_name == 'workflow_dispatch' && github.event.inputs.deploy-all == 'true' ) }}

jobs:
  list-versions:
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      nver: ${{ steps.set-matrix.outputs.nver }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Stage missing versions for upload
      if: ${{ env.DEPLOY_ALL == 'false' }}
      run: |
        echo "This will go through versions and list the missing ones in a new file 'versions_processed.txt'"
        touch versions_processed.txt
        while IFS="" read -r p || [ -n "$p" ]
        do
          if ! curl --silent -f -lSL "https://index.docker.io/v1/repositories/jreher/boss/tags/$p" >> /dev/null ; then
            echo "Staging version $p for upload."
            echo "$p" >> versions_processed.txt
          fi
        done <versions.txt
    - name: Stage all versions for upload
      if: ${{ env.DEPLOY_ALL == 'true' }}
      run: |
        cp versions.txt versions_processed.txt
    - name: Turn new list into output for matrix
      id: set-matrix
      run: |
        echo "::set-output name=nver::$(cat versions_processed.txt | wc -l)"
        echo "::set-output name=matrix::$(cat versions_processed.txt | jq -R -s -c 'split("\n")[:-1]')"
    - name: Check matrix output
      run: |
        echo "Number of versions: ${{ steps.set-matrix.outputs.nver }}"
        echo "Matrix as json: ${{ steps.set-matrix.outputs.matrix }}"

  process-versions:
    runs-on: ubuntu-latest
    needs: list-versions
    if: ${{ needs.list-versions.outputs.nver > 0 }}
    # permissions:
    #   packages: write
    #   contents: read
    strategy:
      fail-fast: false
      matrix:
        bossversion: ${{ fromJson(needs.list-versions.outputs.matrix) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: jreher
        password: ${{ secrets.dockerhub_pass }}
    # - name: Login to Docker CR
    #   uses: docker/login-action@v2
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.actor }}
    #     password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and push image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        no-cache: ${{ env.DEPLOY_ALL }}
        build-args: |
          BOSS_VERSION=${{ matrix.bossversion }}
        tags: |
          jreher/boss:${{ matrix.bossversion }}
        #  ghcr.io/${{ github.repository_owner }}/boss:${{ matrix.bossversion }}
